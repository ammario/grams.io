import type {NextPage} from 'next'
import {useEffect, useMemo, useState} from "react";
import {useRouter} from "next/router";
import DeleteIcon from '@mui/icons-material/Delete';
import '../node_modules/react-vis/dist/style.css';
import {FlexibleWidthXYPlot, HorizontalGridLines, LineSeries, VerticalGridLines, XAxis, YAxis} from 'react-vis';
import {unit} from 'mathjs';
import ColorHash from 'color-hash';


interface ingestion {
    offset: string
    drugName: string
    halfLife: string
    dosage: string
    id: string
}

const emptyIngestion = (): ingestion => {
    return {
        offset: "0min",
        drugName: "",
        halfLife: "",
        dosage: "",
        id: Math.random().toString(),
    }
}

interface parsedIngestion {
    offset: number
    drugName: string
    halfLife: number
    dosage: number
}

interface point {
    x: number
    y: number
}

const plotInterval = 0.1

// ingestionEndpoint calculates the time by which less than 1/33 of original dose
// still resides in the ingester.
const ingestionEndpoint = (i: parsedIngestion): number => {
    return (i.halfLife * Math.log2(33)) + i.offset
}

// plotIngestion returns 1000 points representing the metabolism of the ingestion.
const plotIngestion = (i: parsedIngestion, endPoint: number): point[] => {
    // The amount of hours by which less than 1/33 of the original dose is present.
    let points: point[] = [];
    for (let x = 0; x <= endPoint; x += plotInterval) {
        if (x < i.offset) {
            points.push({
                x: x,
                y: 0,
            })
            continue
        }
        points.push({
            x: x,
            y: i.dosage / Math.pow(2, ((x - i.offset) / i.halfLife)),
        })
    }

    // Round for clean merging later.
    points.forEach((point, index) => {
        points[index].x = Math.round(point.x * 10) / 10
    })
    return points
}

// mergeLines is a PITA function that combines two lines generated by plotIngestion.
const mergeLines = (a: point[], b: point[]): point[] => {
    let c = new Map<number, number>([])
    const merge = (vs: point[]) => {
        vs.forEach((v => {
            if (c.has(v.x)) {
                c.set(v.x, (c.get(v.x) as number) + v.y)
                return
            }
            c.set(v.x, v.y)
        }))
    }
    merge(a)
    merge(b)
    return Array.from(c, ([x, y]): point => {
        return {x: x, y: y}
    }).sort((a, b) => {
        if (a.x > b.x) {
            return 1
        }
        if (a.x < b.x) {
            return -1
        }
        return 0
    })
}

const drugColor = new ColorHash({lightness: 0.5})

const Home: NextPage = () => {
    const router = useRouter()
    // TODO: store the state in the URL
    const [ingestions, setIngestions] = useState<ingestion[]>(() => {
        console.log(router.query.toString())
        if (typeof window === "undefined") {
            // I have no idea how to grab URL params within a useState with NextJS.
            return [emptyIngestion()]
        }

        const params = new URLSearchParams(window.location.search);
        if (!params.has("ingestions")) {
            return [emptyIngestion()]
        }
        try {
            const ingestions = JSON.parse(params.get("ingestions") as string)
            console.log(ingestions)
            return ingestions
        } catch (e) {
            console.log("oops at the url", e)
            return [emptyIngestion()]
        }
    })

    useEffect(() => {
        const url = {
                query: {
                    ingestions: ingestions.length > 0 ? JSON.stringify(ingestions) : "",
                }
            }
        router.replace(url, undefined, {shallow: true})
        console.log("new url", JSON.stringify(url))
    }, [ingestions])

    const graphData = useMemo((): JSX.Element => {
        const parsedIngestions = (ingestions.map((ingestion): parsedIngestion | undefined => {
            try {
                const dosage = unit(ingestion.dosage).toNumeric('mg') as number
                const halfLife = unit(ingestion.halfLife).toNumber('hours') as number
                const offset = unit(ingestion.offset).toNumber('hours') as number
                if (halfLife > 30 * 30) {
                    throw "Half life is too long (the application will crash!)";
                }
                return {
                    drugName: ingestion.drugName,
                    dosage: dosage,
                    halfLife: halfLife,
                    offset: offset,
                }
            } catch (e) {
                console.log("recoverable ingestion parse exception", e)
                return undefined
            }
        }).filter(v => v) as parsedIngestion[])

        const mergedIngestions = new Map<string, parsedIngestion>([])
        const lines = new Map<string, point[]>([])

        // Find maximum graph endpoint so all lines have equal resolution.
        const graphEndpoint = parsedIngestions.map(
            (i) => ingestionEndpoint(i)
        ).reduce((a, b) =>  Math.max(a, b), 0)

        parsedIngestions.forEach((ingestion) => {
            if (!mergedIngestions.has(ingestion.drugName)) {
                lines.set(ingestion.drugName, plotIngestion(ingestion, graphEndpoint))
                mergedIngestions.set(ingestion.drugName, ingestion)
                return
            }
            const aLine = lines.get(ingestion.drugName) as point[]
            const bLine = plotIngestion(ingestion, graphEndpoint)
            console.log("a", aLine, "b", bLine)
            lines.set(
                ingestion.drugName,
                mergeLines(aLine, bLine),
            )
        })

        console.log("lines", lines)

        return (
            <div className="App">
                <FlexibleWidthXYPlot margin={{left: 75}} height={300}>
                    <XAxis title={"Hours"} tickFormat={v => `${v}h`}/>
                    <YAxis title={"Residuals (mg)"}/>
                    <VerticalGridLines/>
                    <HorizontalGridLines/>
                    {
                        Array.from(lines, ([name, line]) => {
                            return <LineSeries color={drugColor.hex(name)} data={line} opacity={1}/>
                        })
                    }
                </FlexibleWidthXYPlot>
            </div>
        );
    }, [ingestions])

    if (typeof window === "undefined") {
        console.error("no window?")
        return null
    }

    return (
        <div className="h-screen w-screen flex flex-col md:container md:mx-auto py-2 md:py-10">
            <title>grams.io drug half-life calculator</title>
            <h1>grams.io</h1>
            <hr/>
            <div id="ingestions" className="container py-4 px-0">
                <h2>Ingestions</h2>
                <div className={"ingest-container grid gap-4"}>
                    <span>Offset</span>
                    <span>Drug name</span>
                    <span>Dosage</span>
                    <span>Half-life</span>
                    <span> </span>
                </div>
                <hr className={"py-1"}/>
                <form>
                    {
                        ingestions.map((ingestion, index) => {
                            function edit(editedIngestion: Partial<ingestion>) {
                                const newIngestions = [...ingestions]
                                newIngestions[index] = {
                                    ...ingestion,
                                    ...editedIngestion,
                                }
                                setIngestions(newIngestions)
                            }

                            return <div key={ingestion.id} className="ingest-container grid gap-4 py-1">
                                <input type="text" id="offset"
                                       placeholder="0m"
                                       value={ingestion.offset} onChange={(e) => {
                                    edit({
                                        offset: e.target.value,
                                    })
                                }} required/>
                                <input type="text" id="drug-name" list="known-drugs"
                                       style={{borderColor: drugColor.hex(ingestion.drugName), borderWidth: "4px"}}
                                       placeholder="Caffeine" value={ingestion.drugName} onChange={(e) => {
                                    const knownHalfLife = knownDrugs[e.target.value]
                                    edit({
                                        halfLife: knownHalfLife ? knownHalfLife : ingestion.halfLife,
                                        drugName: e.target.value,
                                    })
                                }} required/>

                                <input type="text" value={ingestion.dosage} placeholder="0mg" id="dosage"
                                       onChange={e => edit({dosage: e.target.value})} required/>
                                <input type="text" id="half-life"
                                       placeholder="4.5h" value={ingestion.halfLife}
                                       onChange={(e => edit({halfLife: e.target.value}))} required/>
                                <button className="trash" onClick={() => {
                                    const copy = [...ingestions]
                                    copy.splice(index, 1)
                                    console.log("trash", JSON.stringify(ingestions), JSON.stringify(copy))
                                    setIngestions(copy)
                                }}><DeleteIcon/></button>
                            </div>
                        })
                    }
                </form>
                <datalist id="known-drugs">
                    {
                        Object.keys(knownDrugs).map(key => <option value={key}>{knownDrugs[key]}</option>)
                    }
                </datalist>
                <div className={"py-4"}>
                    <button
                        className="" onClick={() => setIngestions([...ingestions, emptyIngestion()])}>
                        Add ingestion
                    </button>
                </div>
            </div>
            <div id="results" className="container py-4 px-0">
                <h2>Results</h2>
                {graphData}
            </div>
        </div>
    )
}

const knownDrugs: Record<string, string> = {
    "Amphetamine (Adderall)": "10h",
    "Caffeine": "5h",
    "LSD": "5.1h",
}

export default Home
